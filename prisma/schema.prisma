generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                  Int               @id @default(autoincrement())
  name                String
  logo                String?
  description         String?
  location            String?
  servicesAssigned    String?
  users               User[]
  projects            Project[]
  channels            CommunicationChannel[]
  attendance          Attendance[]
  payroll             Payroll[]
  chatbot             Chatbot?
  inventory           Inventory[]
  crm                 CRM[]
  hr                  HR[]
  websiteBuilders     WebsiteBuilder[]
  subscription        Subscription?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model Subscription {
  id                 Int          @id @default(autoincrement())
  type               String
  price              Float
  billingInformation String
  organizationId     Int          @unique
  organization       Organization @relation(fields: [organizationId], references: [id])
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model Chatbot {
  id               Int          @id @default(autoincrement())
  knowledgeData    String?
  avgResponseTime  Float?
  queriesAddressed Int?
  genAIId          String?
  organizationId   Int          @unique
  organization     Organization @relation(fields: [organizationId], references: [id])
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model User {
  id            Int          @id @default(autoincrement())
  email         String        @unique
  password      String
  userType      String
  roles         Role[]
  formData      Json[]
  organizationId Int
  organization  Organization @relation(fields: [organizationId], references: [id])
  assignedTasks Task[]        @relation("TaskAssignee")
  assignedChannels CommunicationChannel[] @relation("ChannelAssignee")
  assignedTickets CustomerTicket[] @relation("TicketAssignee")
  assignedProjects Project[] @relation("ProjectAssignee")
  messages      Message[]
  attendances   Attendance[]
  payrolls      Payroll[]
  payslips      Payslip[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Role {
  id             Int          @id @default(autoincrement())
  name           String
  accessRights   Json
  assignedUsers  User[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Project {
  id              Int              @id @default(autoincrement())
  name            String
  assigneeId      Int
  assignee        User             @relation("ProjectAssignee", fields: [assigneeId], references: [id])
  boards          Board[]
  comments        Json?
  organizationId  Int
  organization    Organization     @relation(fields: [organizationId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Board {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  color       String?
  tasks       Task[]
  projectId   Int
  project     Project     @relation(fields: [projectId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Task {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  dueDate     DateTime
  assigneeId  Int
  assignee    User      @relation("TaskAssignee", fields: [assigneeId], references: [id])
  boardId     Int
  board       Board     @relation(fields: [boardId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CommunicationChannel {
  id            Int       @id @default(autoincrement())
  name          String
  assigneeId    Int
  assignee      User      @relation("ChannelAssignee", fields: [assigneeId], references: [id])
  messages      Message[]
  organizationId Int
  organization  Organization @relation(fields: [organizationId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Message {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  text        String
  channelId   Int
  channel     CommunicationChannel @relation(fields: [channelId], references: [id])
  createdAt   DateTime  @default(now())
}

model Attendance {
  id              Int       @id @default(autoincrement())
  userId          Int
  user            User      @relation(fields: [userId], references: [id])
  employmentType  String
  checkIn         DateTime
  checkOut        DateTime?
  organizationId  Int
  organization    Organization @relation(fields: [organizationId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Payroll {
  id            Int       @id @default(autoincrement())
  userId        Int
  user          User      @relation(fields: [userId], references: [id])
  attendance    Json
  payrollRules  Json
  taxRules      Json
  payslips      Payslip[]
  organizationId Int
  organization  Organization @relation(fields: [organizationId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Payslip {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  calculation Json
  payrollId   Int
  payroll     Payroll   @relation(fields: [payrollId], references: [id])
  createdAt   DateTime  @default(now())
}

model Inventory {
  id               Int       @id @default(autoincrement())
  categories       InventoryCategory[]
  rules            Json
  organizationId   Int
  organization     Organization @relation(fields: [organizationId], references: [id])
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model InventoryCategory {
  id          Int      @id @default(autoincrement())
  name        String
  schema      Json
  items       Item[]
  inventoryId Int
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  createdAt   DateTime @default(now())
}

model Item {
  id             Int       @id @default(autoincrement())
  name           String
  quantity       Int
  note           String?
  inventoryId    Int
  inventory      InventoryCategory @relation(fields: [inventoryId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model WebsiteBuilder {
  id               Int       @id @default(autoincrement())
  template         Json
  userLanding      Json
  published        Boolean   @default(false)
  organizationId   Int
  organization     Organization @relation(fields: [organizationId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model CRM {
  id              Int       @id @default(autoincrement())
  customers       Customer[]
  tickets         CustomerTicket[]
  organizationId  Int
  organization    Organization @relation(fields: [organizationId], references: [id])
  createdAt       DateTime @default(now())
}

model Customer {
  id           Int       @id @default(autoincrement())
  name         String
  progress     String?
  contact      String
  crmId        Int
  crm          CRM       @relation(fields: [crmId], references: [id])
  createdAt    DateTime @default(now())
}

model CustomerTicket {
  id           Int       @id @default(autoincrement())
  query        String
  assigneeId   Int
  assignee     User      @relation("TicketAssignee", fields: [assigneeId], references: [id])
  email        String
  resolved     Boolean   @default(false)
  crmId        Int
  crm          CRM       @relation(fields: [crmId], references: [id])
  createdAt    DateTime  @default(now())
}

model HR {
  id                  Int       @id @default(autoincrement())
  appraisalForms      AppraisalForm[]
  alerts              Json
  organizationId      Int
  organization        Organization @relation(fields: [organizationId], references: [id])
  createdAt           DateTime @default(now())
}

model AppraisalForm {
  id              Int       @id @default(autoincrement())
  schema          Json
  active          Boolean
  responses       Json
  hrId            Int
  hr              HR        @relation(fields: [hrId], references: [id])
  createdAt       DateTime  @default(now())
}
